; Generate default file containing DB URIs to test against, if not present.

(rule
  (targets uris.conf)
  (mode fallback)
  (action (write-file %{targets} "sqlite3:test.db?busy_timeout=60000\n")))

; The generic testsuite as a library.

(library
  (name testsuite)
  (wrapped false)
  (modules
    test_connect
    test_error_cause
    test_failure
    test_parallel
    test_param
    test_sql)
  (libraries caqti caqti.platform ptime.clock.os testlib testlib_tls))

; Instantiations of the testsuite.

(executable
  (name main_blocking)
  (modules main_blocking)
  (libraries
    caqti caqti.blocking caqti-dynload
    alcotest testlib testlib_blocking testsuite))

(rule
  (alias runtest)
  (package caqti-dynload)
  (deps (:test main_blocking.exe) (alias drivers) uris.conf)
  (locks /db/testsuite)
  (action (setenv OCAMLPATH . (run %{test}))))

(executable
  (name main_eio_unix)
  (enabled_if (>= %{ocaml_version} "5.0"))
  (modules main_eio_unix)
  (libraries
    caqti caqti-eio.unix caqti-dynload caqti-tls-eio
    alcotest eio eio_main mirage-crypto-rng-eio
    testlib testlib_eio_unix testsuite))

(rule
  (alias runtest)
  (package caqti-tls-eio)
  (enabled_if (>= %{ocaml_version} "5.0"))
  (deps (:test main_eio_unix.exe) (alias drivers) uris.conf)
  (locks /db/testsuite)
  (action (setenv OCAMLPATH . (run %{test}))))

(executable
  (name main_async)
  (modules main_async)
  (libraries
    caqti caqti.platform caqti-dynload caqti-async caqti-tls-async
    alcotest-async testlib testlib_async testsuite))

(rule
  (alias runtest)
  (package caqti-tls-async)
  (deps (:test main_async.exe) (alias drivers) uris.conf)
  (locks /db/testsuite)
  (action (setenv OCAMLPATH . (run %{test}))))

(executable
  (name main_lwt_unix)
  (modules main_lwt_unix)
  (libraries
    caqti caqti.platform caqti-dynload
    caqti-lwt caqti-lwt.unix caqti-tls-lwt.unix
    alcotest-lwt testlib testlib_lwt_unix testsuite))

(rule
  (alias runtest)
  (package caqti-tls-lwt)
  (deps (:test main_lwt_unix.exe) (alias drivers) uris.conf)
  (locks /db/testsuite)
  (action (setenv OCAMLPATH . (run %{test}))))

; Fake META files for dynamic linking of drivers.

(alias (name drivers))

(alias
  (name drivers)
  (package caqti)
  (deps
    META.caqti
    %{cma:../caqti/lib/caqti}
    ../caqti/lib/caqti.cmxs))
(rule
  (targets META.caqti)
  (deps (:first-dep ../META.caqti))
  (action
   (with-stdout-to %{targets}
    (progn
      (echo "directory = \"../caqti/lib\"\n")
      (cat %{first-dep})))))

(alias
  (name drivers)
  (package caqti-driver-mariadb)
  (enabled_if %{lib-available:caqti-driver-mariadb})
  (deps
    (:first-dep META.caqti-driver-mariadb)
    %{cma:../caqti-driver-mariadb/lib/caqti_driver_mariadb}
    ../caqti-driver-mariadb/lib/caqti_driver_mariadb.cmxs))
(rule
  (targets META.caqti-driver-mariadb)
  (deps (:first-dep ../META.caqti-driver-mariadb))
  (action
   (with-stdout-to %{targets}
    (progn
      (echo "directory = \"../caqti-driver-mariadb/lib\"\n")
      (cat %{first-dep})))))

(alias
  (name drivers)
  (package caqti-driver-sqlite3)
  (deps
    META.caqti-driver-sqlite3
    %{cma:../caqti-driver-sqlite3/lib/caqti_driver_sqlite3}
    ../caqti-driver-sqlite3/lib/caqti_driver_sqlite3.cmxs))
(rule
  (targets META.caqti-driver-sqlite3)
  (deps (:first-dep ../META.caqti-driver-sqlite3))
  (action
   (with-stdout-to %{targets}
    (progn
      (echo "directory = \"../caqti-driver-sqlite3/lib\"\n")
      (cat %{first-dep})))))

(alias
  (name drivers)
  (package caqti-driver-postgresql)
  (deps
    META.caqti-driver-postgresql
    %{cma:../caqti-driver-postgresql/lib/caqti_driver_postgresql}
    ../caqti-driver-postgresql/lib/caqti_driver_postgresql.cmxs))
(rule
  (targets META.caqti-driver-postgresql)
  (deps (:first-dep ../META.caqti-driver-postgresql))
  (action
   (with-stdout-to %{targets}
    (progn
      (echo "directory = \"../caqti-driver-postgresql/lib\"\n")
      (cat %{first-dep})))))

(alias
  (name drivers)
  (package caqti-driver-pgx)
  (enabled_if (>= %{ocaml_version} "4.10"))
  (deps
    META.caqti-driver-pgx
    %{cma:../caqti-driver-pgx/lib/caqti_driver_pgx}
    ../caqti-driver-pgx/lib/caqti_driver_pgx.cmxs))
(rule
  (targets META.caqti-driver-pgx)
  (deps (:first-dep ../META.caqti-driver-pgx))
  (action
   (with-stdout-to %{targets}
    (progn
      (echo "directory = \"../caqti-driver-pgx/lib\"\n")
      (cat %{first-dep})))))
